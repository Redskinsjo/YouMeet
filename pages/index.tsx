/* eslint-disable react-hooks/rules-of-hooks */
import type { NextPage } from 'next'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { useSelector, useDispatch } from 'react-redux'
import { useEffect, useState } from 'react'
import { ClipLoader } from 'react-spinners'
import { useQuery } from '@apollo/client'
import { useSession } from 'next-auth/react'

import { withProtected } from '@/components/route-protection'
import { RootState } from '@/redux/store'
import Header from '@/components/header'
import { GetEmployees } from '@/apollo/queries'
import MapboxMap from '@/components/mapbox-map'
import EmployeesList from '@/components/employees-list'
import Footer from '@/components/footer'
import Search from '@/components/search'
import {
  setEmployees,
  fetchingEmployees,
} from '@/redux/features/employeesSlice'

const Home: NextPage = () => {
  const username = useSelector((state: RootState) => state.user.username)
  const router = useRouter()
  const [authenticated, setAuthenticated] = useState(username ? true : false)
  const { data, refetch } = useQuery(GetEmployees, {
    variables: { filter: '', sort: 2 },
  })
  const { data: session } = useSession()
  const dispatch = useDispatch()

  // local state
  const [search, setSearch] = useState('')
  const handleChangeSearch = (e: any) => setSearch(e.target.value)
  const [criteria, setCriteria] = useState(2)
  const handleChangeCriteria = (e: any) => setCriteria(e.target.value)

  useEffect(() => {
    const fetchData = async () => {
      dispatch(fetchingEmployees())
      const empl = await refetch({
        filter: search,
        sort: criteria,
      })
      dispatch(setEmployees(empl.data.employees))
    }
    fetchData()
  }, [criteria, search])

  useEffect(() => {
    if (!session) {
      router.push('/login')
    }
  }, [])

  return session && data ? (
    <div className="h-full">
      <Head>
        <title>YouMeet</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo-favicon.png" />
      </Head>
      <Header />
      <div
        className="w-full flex justify-center mt-16"
        style={{ background: 'linear-gradient(rgba(0,0,0,0.1),#FFF)' }}
      >
        <MapboxMap
          center={[3, 33]}
          zoom={1.5}
          employees={data.employees}
          styles={{
            width: '80%',
            minHeight: '800px',
            margin: 20,
            borderRadius: 20,
            border: '1px solid black',
          }}
        />
      </div>
      <div className="h-[80px] flex justify-center items-center">
        <Search
          search={search}
          handleChangeSearch={handleChangeSearch}
          criteria={criteria}
          handleChangeCriteria={handleChangeCriteria}
        />
      </div>
      <EmployeesList data={data} />
      <Footer />
    </div>
  ) : (
    <div className="w-full h-full flex justify-center items-center">
      <ClipLoader size={66} />
    </div>
  )
}

export default Home
// export default withProtected(Home);
